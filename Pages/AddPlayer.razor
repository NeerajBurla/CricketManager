@page "/addplayer"
@inject IDataRepository<addplayer> dataRepository
@inject IDataRepository<CricketTeam> teamRepository

@using CricketManager.Models
@using System.Text;
@inject NavigationManager NavigationManager
@inject HttpClient Http 

<h3>Add Player</h3>
<div class="demo-section">
        <TelerikForm Model="newPlayer"
                 @ref="@FormRef"
                 OnValidSubmit="@HandleValidSubmit">
            <FormValidation>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidation>
            <FormItems>
               @* <form action="/action_page.php">
                    <input type="file" id="myFile" name="filename">
                </form>*@
                <FormItem LabelText=" Name" Field="@(nameof(addplayer.Name))" />

                
                <FormItem LabelText="Date Of Birth" Field="@(nameof(addplayer.DateofBirth))" />
                <FormItem LabelText="Position" Field="@(nameof(addplayer.Position))" />
                
                
                <labeltext>Captain :</labeltext>
                <div class="form-control" style="border:none">
                <InputRadioGroup 
                               @bind-Value="@newPlayer.Captain">
                    @foreach (var option in value)
                    {
                        <InputRadio Value="option.Value" /> @option.Text <br />
                    }
                </InputRadioGroup>
                </div>
                <labeltext>Select Team:</labeltext>
                <TelerikDropDownList Data="myDdlData" TextField="Name" ValueField="Name" @bind-Value="@newPlayer.TeamName">
                </TelerikDropDownList>
                <FormItem LabelText="BattingOrder" Field="@(nameof(addplayer.BattingOrder))" />
                <FormItem LabelText="BowlingStyle" Field="@(nameof(addplayer.BowlingStyle))" />
                <FormItem LabelText="Rating" Field="@(nameof(addplayer.Rating))" />
            </FormItems>
            <FormButtons>
                <input type="submit" value="Save" @onclick="AddNotification" class="btn btn-primary" />
                          @* <TelerikButton ButtonType="ButtonType.Button" OnClick="@OnClear">Reset</TelerikButton>*@
            </FormButtons>
        </TelerikForm>
        <TelerikNotification HorizontalPosition="@NotificationHorizontalPosition.Center" VerticalPosition="@NotificationVerticalPosition.Top" @ref="@NotificationReference" Class="MyTelerikNotification"></TelerikNotification>
</div>
@code {

    public TelerikNotification NotificationReference { get; set; }

    public void AddNotification()
    {
        NotificationReference.Show(new NotificationModel()
            {
                Text = "New Player Added",
                ThemeColor = ThemeConstants.Notification.ThemeColor.Success,

            });
    }
    public string Selectedvalue { get; set; } = "Select team";

    public IEnumerable<CricketTeam> myDdlData { get; set; } = new List<CricketTeam>();


    protected async override Task OnInitializedAsync()
    {
        newPlayer = new addplayer();
        //Fetch all list of teams to populate the dropdown
        myDdlData = teamRepository.Get();

        await base.OnInitializedAsync();
    }

    public IsCaptain SelectedValue { get; set; } = IsCaptain.No;
    public List<Captain> value { get; set; } = new List<Captain>()
    {
        new Captain() { Text = "Yes", Value = IsCaptain.Yes },
        new Captain() { Text = "No", Value = IsCaptain.No },
    };

    public class Captain
    {
        public string Text { get; set; }
        public IsCaptain Value { get; set; }
    }

    public enum IsCaptain
    {
        Yes,
        No
    }
    public TelerikForm FormRef { get; set; }

    public addplayer newPlayer { get; set; }

    public List<CaptainModel> captain { get; set; } = new List<CaptainModel>()
{
        new CaptainModel() { Value = 1, Text = "Yes" },
        new CaptainModel() { Value = 2, Text = "No" },
    };


    public void HandleValidSubmit()
    {
       //Code to add a new player in Cricket Manager 
        dataRepository.Add(newPlayer);

    }

    DateTime Date = DateTime.Today;

    private List<string> WeatherOptions = new List<string>() { "cloudy", "rainy", "snowy", "sunny", "partly-sunny" };

    void OnCalendarCellRenderHandler(DatePickerCalendarCellRenderEventArgs args)
    {
        foreach (var weather in WeatherOptions)
        {
            args.Class = "with-forecast " + WeatherOptions[args.Date.Day % WeatherOptions.Count];
        }
    }
}


<style>
    .MyTelerikNotification .k-notification-container .k-notification-wrap {
        width: 300px;
        height: 50px;
        font-size: 1.5em;
        text-align: center;
        align-items: center;
    }
</style>