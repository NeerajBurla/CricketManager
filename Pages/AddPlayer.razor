@page "/addplayer"


@using CricketManager.Models
@using System.Text;
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>Add Player</h3>
<h3 class="alert-success">@SubmitMessage</h3>
<div class="demo-section">
    @if (ValidSubmit)
    {
        <div class="demo-alert demo-alert-success" role="alert">
            The form was submitted successfully.
        </div>
    }
    else
    {
        <TelerikForm Model="newPlayer"
                 @ref="@FormRef"
                 OnInvalidSubmit="@HandleInvalidSubmit">
            <FormValidation>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidation>
            <FormItems>
                <FormItem LabelText=" Name" Field="@(nameof(addplayer.Name))" />
                <FormItem Field="@(nameof(addplayer.DateofBirth))" />
                <FormItem LabelText="Position" Field="@(nameof(addplayer.Position))" />
                
                <labeltext>Captain :</labeltext>
                <div class="form-control" style="border:none">
                <InputRadioGroup 
                               @bind-Value="@newPlayer.Captain">
                    @foreach (var option in value)
                    {
                        <InputRadio Value="option.Value" /> @option.Text <br />
                    }
                </InputRadioGroup>
                </div>

                <TelerikDropDownList Data="myDdlData" TextField="Name" ValueField="Name" @bind-Value="@newPlayer.TeamName">
                </TelerikDropDownList>
                <FormItem LabelText="BattingOrder" Field="@(nameof(addplayer.BattingOrder))" />
                <FormItem LabelText="BowlingStyle" Field="@(nameof(addplayer.BowlingStyle))" />
                <FormItem LabelText="Rating" Field="@(nameof(addplayer.Rating))" />
            </FormItems>
            <FormButtons>
                <input type="submit" value="Save" @onclick="HandleValidSubmit" class="btn btn-primary" />
                          @* <TelerikButton ButtonType="ButtonType.Button" OnClick="@OnClear">Reset</TelerikButton>*@
            </FormButtons>
        </TelerikForm>

        @* <TelerikGrid Data="@forecasts" Height="150px" Width="800px">
    <GridColumns>
    <GridColumn Field="@(nameof(addplayer.Name))" />
    <GridColumn Field="@(nameof(addplayer.DateofBirth))" />
    <GridColumn Field="@(nameof(addplayer.Position))" />
    <GridColumn Field="@(nameof(addplayer.Captain))" />
    <GridColumn Field="@(nameof(addplayer.BattingOrder))" />
    <GridColumn Field="@(nameof(addplayer.BowlingStyle))" />
    <GridColumn Field="@(nameof(addplayer.Rating))" />
    </GridColumns>
    </TelerikGrid>*@
    }
</div>
@code {
    private addplayer[] forecasts;

    public string Selectedvalue { get; set; } = "Select team";

    public IEnumerable<addteam> myDdlData { get; set; }
    public string SubmitMessage { get; set; }
    //protected override async Task OnInitializedAsync()
    //{
    //    newPlayer = new addplayer();
    //    if (Http.BaseAddress == null)
    //        Http.BaseAddress = new Uri("https://localhost:5001/");
    //    var url = new Uri(Http.BaseAddress + "JsonData/aplayer.json");

    //    var playerinfo = await Http.GetAsync(url);
    //    var playerResponseInfo = await playerinfo.Content.ReadAsStringAsync();


    //    forecasts = JsonConvert.DeserializeObject<addplayer[]>(playerResponseInfo);
    //}

    protected async override Task OnInitializedAsync()
    {
        newPlayer = new addplayer();
        myDdlData = new List<addteam>();
        if (Http.BaseAddress == null)
            Http.BaseAddress = new Uri("https://localhost:5001/");
        //Http.BaseAddress = new Uri("https://localhost:5001/");
        var url = new Uri(Http.BaseAddress + "JsonData/AddTeam.json");

        var playerinfo = await Http.GetAsync(url);
        var playerResponseInfo = await playerinfo.Content.ReadAsStringAsync();
        myDdlData = JsonConvert.DeserializeObject<addteam[]>(playerResponseInfo);
    }
        
    public IsCaptain SelectedValue { get; set; } = IsCaptain.No;
    public List<Captain> value { get; set; } = new List<Captain>()
    {
        new Captain() { Text = "Yes", Value = IsCaptain.Yes },
        new Captain() { Text = "No", Value = IsCaptain.No },
    };

    public class Captain
    {
        public string Text { get; set; }
        public IsCaptain Value { get; set; }

        public Captain()
        {
        }
    }

    public enum IsCaptain
    {
        Yes,
        No
    }
    public TelerikForm FormRef { get; set; }

    public addplayer newPlayer { get; set; }
    public bool ValidSubmit { get; set; } = false;

    public addplayer TestApplication { get; set; } = new addplayer();

    public List<captainmodel> captain { get; set; } = new List<captainmodel>()
{
        new captainmodel() { Value = 1, Text = "Yes" },
        new captainmodel() { Value = 2, Text = "No" },
    };

    //private void OnClear()
    //{
    //    TestApplication = new addplayer();

    //    TestEditContext = new EditContext(TestApplication);
    //    TestEditContext.EnableDataAnnotationsValidation();
    //}

    public void HandleValidSubmit()
    {
        if (Http.BaseAddress == null)
            Http.BaseAddress = new Uri("https://localhost:5001/");
        var url = new Uri(Http.BaseAddress + "JsonData/aplayer.json");

        string json = File.ReadAllText("wwwroot/JsonData/aplayer.json");

        var jsonObj = JsonConvert.DeserializeObject<List<addplayer>>(json);

        jsonObj.Add(newPlayer);


        var updatedJson = JsonConvert.SerializeObject(jsonObj);

        File.WriteAllText("wwwroot/JsonData/aplayer.json", updatedJson);

        SubmitMessage = "New Player Added Successfully";
        //System.IO.File.AppendAllText("wwwroot/JsonData/aplayer.json", content);

    }

    public string AddObjectsToJson<T>(string json, List<T> objects)
    {
        List<T> list = JsonConvert.DeserializeObject<List<T>>(json);
        list.AddRange(objects);
        return JsonConvert.SerializeObject(list);
    }

    void HandleInvalidSubmit()
    {
        ValidSubmit = false;
    }
    public void AddingtoEditTeam()
    {
        NavigationManager.NavigateTo("EditTeam");
    }
}