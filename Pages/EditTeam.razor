@page "/editteam"
@inject HttpClient Http
@inject NavigationManager navigate

<h3>Edit Team</h3>

<div class="demo-section">
    @if (ValidSubmit)
    {
        <div class="demo-alert demo-alert-success" role="alert">
            The form was submitted successfully.
        </div>

    }
    else
    {
        <TelerikForm Model="@addteam"
                 OnValidSubmit="@HandleValidSubmit"
                 OnInvalidSubmit="@HandleInvalidSubmit" >
            <FormValidation>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidation>
            <FormItems>
                <FormItem Field="@nameof(addteam.Name)"></FormItem>
                <FormItem Field="@nameof(addteam.Manager)"></FormItem>
                <FormItem Field="@nameof(addteam.Contact)"></FormItem>
            </FormItems>
            <FormButtons></FormButtons>
        </TelerikForm>
    }
</div>
<div>
    <TelerikGrid Data="@theData" Height="150px" Width="800px">
            <GridColumns>
                <GridColumn Field="@(nameof(addplayer.Name))">
                    <Template>
                    <a href="@($"/editplayer/{((context as addplayer).Name)}")">
                        <span class="span-nav">
                            @((context as addplayer).Name)
                        </span>
                    </a>
                    </Template>
                </GridColumn>
                <GridColumn Field="@(nameof(addplayer.DateofBirth))" />
                <GridColumn Field="@(nameof(addplayer.Position))" />
                <GridColumn Field="@(nameof(addplayer.Captain))" />
            </GridColumns>
    </TelerikGrid>
        <TelerikButton>
        <a href="AddPlayer">Add New Player</a>
        </TelerikButton>
   @* <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@(ThemeConstants.Button.ThemeColor.Warning)">Delete Team</TelerikButton>*@
    <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">Save</TelerikButton>
    <TelerikButton ButtonType="ButtonType.Reset" ThemeColor="@(ThemeConstants.Button.ThemeColor.Secondary)">Cancel</TelerikButton>
  
</div>
@code {
    public addteam addteam { get; set; } = new addteam()
        {
            Name = "Nec",
            Manager = "neeraj",
            Contact = "987867567785",
        };
    public bool ValidSubmit { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (Http.BaseAddress == null)
            Http.BaseAddress = new Uri("https://localhost:5001/");
        //Http.BaseAddress = new Uri("https://localhost:5001/");
        var url = new Uri(Http.BaseAddress + "JsonData/aplayer.json");

        var playerinfo = await Http.GetAsync(url);
        var playerResponseInfo = await playerinfo.Content.ReadAsStringAsync();


        theData = JsonConvert.DeserializeObject<addplayer[]>(playerResponseInfo);
    }

    async void HandleValidSubmit()
    {
        ValidSubmit = true;

        await Task.Delay(2000);

        ValidSubmit = false;

        StateHasChanged();
    }

    void HandleInvalidSubmit()
    {
        ValidSubmit = false;
    }

    public addplayer[] theData;
}