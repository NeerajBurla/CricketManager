@page "/editteam"

<h3>Edit Team</h3>

<div class="demo-section">
    @if (ValidSubmit)
    {
        <div class="demo-alert demo-alert-success" role="alert">
            The form was submitted successfully.
        </div>

    }
    else
    {
        <TelerikForm Model="@addteam"
                 OnValidSubmit="@HandleValidSubmit"
                 OnInvalidSubmit="@HandleInvalidSubmit">
            <FormValidation>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidation>
            <FormItems>
                <FormItem Field="@nameof(addteam.Name)"></FormItem>@*<label for="Name" class="k-label k-form-label">Name*:</label>*@
                <FormItem Field="@nameof(addteam.Manager)"></FormItem>
                <FormItem Field="@nameof(addteam.Contact)"></FormItem>
            </FormItems>
        </TelerikForm>
    }
</div>
<div>
    <TelerikGrid Data="@theData" Height="150px" Width="800px">
            <GridColumns>
                <GridColumn Field="@(nameof(addplayer.Name))" />
                <GridColumn Field="@(nameof(addplayer.DateofBirth))" />
                <GridColumn Field="@(nameof(addplayer.Position))" />
                <GridColumn Field="@(nameof(addplayer.Captain))" />
            </GridColumns>
    </TelerikGrid>
        <TelerikButton>
        <a href="AddPlayer">Add New Player</a>
        </TelerikButton>
    <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@(ThemeConstants.Button.ThemeColor.Warning)">Delete Team</TelerikButton>
    <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">Save</TelerikButton>
    <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@(ThemeConstants.Button.ThemeColor.Secondary)">Cancel</TelerikButton>
  
</div>
@code {
    public addteam addteam { get; set; } = new addteam()
        {
            Name = "Nec",
            Manager = "neeraj",
            Contact = "987867567785",
        };
    public bool ValidSubmit { get; set; } = false;

    async void HandleValidSubmit()
    {
        ValidSubmit = true;

        await Task.Delay(2000);

        ValidSubmit = false;

        StateHasChanged();
    }

    void HandleInvalidSubmit()
    {
        ValidSubmit = false;
    }

    public List<addplayer> theData = new List<addplayer>
    {
        new addplayer
        {
            Name = "Nec",
            DateofBirth = "21",
            Position = Position.Batter,
            Captain ="Yes",
        },
        new addplayer
        {
            Name = "Raas",
            DateofBirth = "22",
            Position = Position.Wicketkeeper,
            Captain ="No",
        },
        new addplayer
        {
            Name = "Apollo",
            DateofBirth = "23",
            Position = Position.Bowler,
            Captain ="Yes"
        },
    };
}