@page "/editteam/{name}"
@inject HttpClient Http
@inject NavigationManager navigate

<h3>Edit Team</h3>

<h3 class="text-success">@SubmitMessage</h3>
<div class="demo-section k-form k-form-vertical">
    @if (ValidSubmit)
    {
        <div class="demo-alert demo-alert-success" role="alert">
            The form was submitted successfully.
        </div>

    }
    else
    {
        <TelerikForm Model="@cricketeam"
                 OnValidSubmit="@HandleValidSubmit"
                 OnInvalidSubmit="@HandleInvalidSubmit">
         
            <FormValidation>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidation>
            <FormItems>
                <label>Logo </label>
                <TelerikFileSelect OnSelect="Filepath"
                               AllowedExtensions="@( new List<string>() { ".png", ".jpeg" } )">
                </TelerikFileSelect>
                <FormItem Field="@nameof(CricketTeam.Name)"></FormItem>
                <FormItem Field="@nameof(CricketTeam.Manager)"></FormItem>
                <FormItem Field="@nameof(CricketTeam.Contact)"></FormItem>
            </FormItems>
            <FormButtons>
                <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">Save</TelerikButton>
            </FormButtons>
        </TelerikForm>
    }
</div>
<div>
    <TelerikGrid Data="@theData" Height="400px" Width="800px">
            <GridColumns>
                <GridColumn Field="@(nameof(addplayer.Name))">
                    <Template>
                    <a href="@($"/editplayer/{((context as addplayer).Name)}")">
                        <span class="span-nav">
                            @((context as addplayer).Name)
                        </span>
                    </a>
                    </Template>
                </GridColumn>
                <GridColumn Field="@(nameof(addplayer.DateofBirth))" />
                <GridColumn Field="@(nameof(addplayer.Position))" />
                <GridColumn Field="@(nameof(addplayer.Captain))" />
                <GridColumn Field="@(nameof(addplayer.TeamName))" />
        </GridColumns>
    </TelerikGrid>
        <TelerikButton>
        <a href="AddPlayer">Add New Player</a>
        </TelerikButton>
   @* <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@(ThemeConstants.Button.ThemeColor.Warning)">Delete Team</TelerikButton>*@
   @* <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">Save</TelerikButton>
    <TelerikButton ButtonType="ButtonType.Reset" ThemeColor="@(ThemeConstants.Button.ThemeColor.Secondary)">Cancel</TelerikButton>*@
  
</div>
@code {
    public CricketTeam cricketeam;

    public void Filepath(FileSelectEventArgs args)
    {
        foreach (var file in args.Files)
        {
            FileName = file.Name;
        }
    }

    [Parameter]
    public string Name { get; set; }

    public string FileName { get; set; }

    public string SubmitMessage { get; set; }

    public bool ValidSubmit { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        cricketeam = new CricketTeam();
        if (Http.BaseAddress == null)
            Http.BaseAddress = new Uri("https://localhost:5001/");
        //Http.BaseAddress = new Uri("https://localhost:5001/");
        var url = new Uri(Http.BaseAddress + "JsonData/aplayer.json");

        var playerinfo = await Http.GetAsync(url);
        var playerResponseInfo = await playerinfo.Content.ReadAsStringAsync();


        theData = JsonConvert.DeserializeObject<addplayer[]>(playerResponseInfo);
    }

    protected async override Task OnParametersSetAsync()
    {
        
        if (Http.BaseAddress == null)
            Http.BaseAddress = new Uri("https://localhost:5001/");
        //Http.BaseAddress = new Uri("https://localhost:5001/");
        var json = File.ReadAllText("wwwroot/JsonData/AddTeam.json");

        var team = JsonConvert.DeserializeObject<List<CricketTeam>>(json);

        cricketeam = team.FirstOrDefault(p => p.Name == Name);


    }

    async void HandleValidSubmit()
    {
        string json = File.ReadAllText("wwwroot/JsonData/AddTeam.json");

        var jsonObj = JsonConvert.DeserializeObject<List<CricketTeam>>(json);

        var player = jsonObj.Where(p => p.Name == Name).First();

        player.Name = cricketeam.Name;
        player.Logo = FileName;

        player.Manager = cricketeam.Manager;
        player.Contact = cricketeam.Contact;

        //Removing old data of team and updating with new data 
        var oldteam = jsonObj.Where(p => p.Name == Name).First();

        jsonObj.Remove(oldteam);
        jsonObj.Add(player);


        var updatedJson = JsonConvert.SerializeObject(jsonObj);

        File.WriteAllText("wwwroot/JsonData/AddTeam.json", updatedJson);

        SubmitMessage = "Team Data Updated Successfully";
    }

    void HandleInvalidSubmit()
    {
        ValidSubmit = false;
    }

    public addplayer[] theData;
}