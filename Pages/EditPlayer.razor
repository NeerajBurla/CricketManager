@page "/editplayer/{name}"
@inject HttpClient Http


@using CricketManager.Models
@inject NavigationManager NavigationManager

<h3>Edit Player</h3>
<h3>@SubmitMessage</h3>
<div class="demo-section">
    @if (ValidSubmit)
    {
        <div class="demo-alert demo-alert-success" role="alert">
            The form was submitted successfully.
        </div>
    }
    else
    {
        <TelerikForm Model="@editPlayer"
                 @ref="@FormRef"
                 OnValidSubmit="@HandleValidSubmit"
                 OnInvalidSubmit="@HandleInvalidSubmit">
            <FormValidation>
                <DataAnnotationsValidator></DataAnnotationsValidator>
            </FormValidation>
            <FormItems>
                <FormItem LabelText=" Name" Field="@(nameof(addplayer.Name))" />
                <FormItem Field="@(nameof(addplayer.DateofBirth))" />
                <FormItem LabelText="Position" Field="@(nameof(addplayer.Position))" />
                @* <FormItem LabelText="Captian:" />*@
                <labeltext>Captain :</labeltext>
                <TelerikRadioGroup Data="@value"
                               @bind-Value="@SelectedValue"></TelerikRadioGroup>
                <TelerikDropDownList Data="myDdlData" TextField="Name" ValueField="Name" @bind-Value="@editPlayer.TeamName">
                </TelerikDropDownList>
                <FormItem LabelText="BowlingStyle" Field="@(nameof(addplayer.BowlingStyle))" />
                <FormItem LabelText="Rating" Field="@(nameof(addplayer.Rating))" />
            </FormItems>
            <FormButtons>
                <TelerikButton ButtonType="ButtonType.Button" ThemeColor="@(ThemeConstants.Button.ThemeColor.Warning)">Delete Team</TelerikButton>
                <TelerikButton ButtonType="ButtonType.Submit" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">Save</TelerikButton>
                @*<TelerikButton ButtonType="ButtonType.Button" OnClick="@OnClear">Reset</TelerikButton>*@
            </FormButtons>
        </TelerikForm>
    }
</div>
@code {
    public IsCaptain SelectedValue { get; set; } = IsCaptain.No;

    public IEnumerable<addteam> myDdlData { get; set; }
    public List<Captain> value { get; set; } = new List<Captain>()
    {
        new Captain() { Text = "Yes", Value = IsCaptain.Yes },
        new Captain() { Text = "No", Value = IsCaptain.No },
    };

    public class Captain
    {
        public string Text { get; set; }
        public IsCaptain Value { get; set; }

        public Captain()
        {
        }
    }

    public enum IsCaptain
    {
        Yes,
        No
    }
    public TelerikForm FormRef { get; set; }

    [Parameter]
    public string Name { get; set; }
    public EditContext TestEditContext { get; set; }
    public bool ValidSubmit { get; set; } = false;

    public string SubmitMessage { get; set; }

    public addplayer editPlayer { get; set; } 
    public List<captainmodel> captain { get; set; } = new List<captainmodel>()
{
        new captainmodel() { Value = 1, Text = "Yes" },
        new captainmodel() { Value = 2, Text = "No" },
    };

    protected async override Task OnInitializedAsync()
    {
        editPlayer = new addplayer();
        myDdlData = new List<addteam>();
        if (Http.BaseAddress == null)
            Http.BaseAddress = new Uri("https://localhost:5001/");
        //Http.BaseAddress = new Uri("https://localhost:5001/");
        var url = new Uri(Http.BaseAddress + "JsonData/AddTeam.json");

        var playerinfo = await Http.GetAsync(url);
        var playerResponseInfo = await playerinfo.Content.ReadAsStringAsync();
        myDdlData = JsonConvert.DeserializeObject<addteam[]>(playerResponseInfo);
    }

    async void HandleValidSubmit()
    {
        if (Http.BaseAddress == null)
            Http.BaseAddress = new Uri("https://localhost:5001/");
        var url = new Uri(Http.BaseAddress + "JsonData/aplayer.json");

        string json = File.ReadAllText("wwwroot/JsonData/aplayer.json");

        var jsonObj = JsonConvert.DeserializeObject<List<addplayer>>(json);

        var player = jsonObj.Where(p => p.Name == Name).First();

        player.Name = editPlayer.Name;
        player.DateofBirth = editPlayer.DateofBirth;
        player.Captain = editPlayer.Captain;
        player.BattingOrder = editPlayer.BattingOrder;
        player.BowlingStyle = editPlayer.BowlingStyle;
        player.Rating = editPlayer.Rating;
        player.Position = editPlayer.Position;
        player.TeamName = editPlayer.TeamName;
        var oldplayer = jsonObj.Where(p => p.Name == Name).First();
        jsonObj.Remove(oldplayer);
        jsonObj.Add(player);


        var updatedJson = JsonConvert.SerializeObject(jsonObj);
        
        File.WriteAllText("wwwroot/JsonData/aplayer.json", updatedJson);

        SubmitMessage = "Existing Player Updated Successfully";
    }

    void HandleInvalidSubmit()
    {
        ValidSubmit = false;
    }

    protected override void OnParametersSet()
    {
        editPlayer = new addplayer();
        string json = File.ReadAllText("wwwroot/JsonData/aplayer.json");
        List<addplayer> players = JsonConvert.DeserializeObject<List<addplayer>>(json);

        addplayer player = players.FirstOrDefault(p => p.Name == Name);

        editPlayer = player;

        //using (var response = await httpClient.GetAsync("https://localhost:44337/api/AuthorApi/" + Id))
            //{
            //    string apiResponse = await response.Content.ReadAsStringAsync();
            //    Author = JsonConvert.DeserializeObject<AuthorModel>(apiResponse);
            //}
    }
    }